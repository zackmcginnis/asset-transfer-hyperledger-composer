/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.asset-network.com

/****************** MODEL DEFINITIONS: START ******************/

/**
 * A User participant
 */
abstract participant User identified by userId {
  o String userId
  o String firstName
  o String lastName
  o String accountType
  o String email
}

/**
 * An Admin participant
 */
participant Admin extends User {
    o String address1
    o String address2
    o String country
    o String postcode
}

/**
 * A Customer participant
 */
participant Customer extends User {
    o String address1
    o String address2
    o String country
    o String postcode
}

/**
 * A Business participant
 */
participant Business extends User {
    o String address1
    o String address2
    o String country
    o String postcode
}

/**
 * An Exchange participant
 */
participant Exchange extends User {
    o String address1
    o String address2
    o String country
    o String postcode
}

asset Account identified by accountId {
  o String accountId
  --> User owner
  o Double balance
  o Boolean frozen
}

/****************** MODEL DEFINITIONS: END ******************/
/****************** PARTICIPANT TRANSACTIONS: START ******************/
/*
NOTE: Composer REST Server automatically sets up endpoints for CRUD operations (GET, POST, etc...) for all participant types.
The following transactions act as an extension to these automatically generated endpoints, and may overlap in many areas
*/

transaction CreateCompleteParticipant {
  o String email
  o String accountType
}

event CreateCompleteParticipantNotification {
  o String email
  o String accountType
}

transaction RemoveCompleteParticipant {
  o String userId
}

event RemoveCompleteParticipantNotification {
  o String userId
}

transaction CreateParticipant {
  o String email
  o String accountType
  o String address1
  o String address2
  o String country
  o String postcode
  o String userId
  o String firstName
  o String lastName
}

event CreateParticipantNotification {
o String email
  o String accountType
  o String address1
  o String address2
  o String country
  o String postcode
  o String userId
  o String firstName
  o String lastName
}

transaction DeleteParticipant {
  o String userId
}

event DeleteParticipantNotification {
  o String userId
}


/****************** PARTICIPANT TRANSACTIONS: END ******************/
/****************** ACCOUNT TRANSACTIONS: START ******************/
/*
NOTE: Composer REST Server automatically sets up endpoints for CRUD operations (GET, POST, etc...) for the Account asset.
The following transactions act as an extension to these automatically generated endpoints, and may overlap in many areas
*/

transaction Transfer {
  --> User from
  --> User to
  --> Account fromAccount
  --> Account toAccount
  o Double amount
}

event TransferNotification {
  --> User from
  --> User to
  o Double amount
}

transaction FreezeAccount {
  --> User owner
  --> Account account
}

event FreezeNotification {
  --> User owner
  --> Account account
}

transaction ThawAccount {
  --> User owner
  --> Account account
}

event ThawNotification {
  --> User owner
  --> Account account
}

transaction CreateAccount {
  --> User owner
  --> Account account
}

event CreateAccountNotification {
  --> User owner
  --> Account account
}

transaction RemoveAccount {
  --> User owner
  --> Account account
}

event RemoveAccountNotification {
  --> User owner
  --> Account account
}

transaction RemoveAllAccounts {
  --> User owner
}

event RemoveAllAccountsNotification {
  --> User owner
}

transaction SchedulePayment {
  --> User owner
  --> Account account
  o Double amount
  o String frequency
  o String startDate
}

event SchedulePaymentNotification {
  --> User owner
  --> Account account
  o Double amount
  o String frequency
  o String startDate
}

/****************** ACCOUNT TRANSACTIONS: END ******************/
/****************** HISTORIAN TRANSACTIONS: START ******************/
transaction GetUserTransactionHistory {
  --> User owner
}

event GetUserTransactionHistoryNotification {
  --> User owner
}

transaction GetAccountTransactionHistory {
  --> User owner
  --> Account account
}

event GetAccountTransactionHistoryNotification {
  --> User owner
  --> Account account
}
/****************** HISTORIAN TRANSACTIONS: END ******************/
